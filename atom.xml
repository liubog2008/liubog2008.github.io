<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liubog2008.github.io/"/>
  <updated>2019-02-18T12:51:33.652Z</updated>
  <id>https://liubog2008.github.io/</id>
  
  <author>
    <name>liubog2008</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust 学习历程（一）</title>
    <link href="https://liubog2008.github.io/2019/02/18/learn-rust-one/"/>
    <id>https://liubog2008.github.io/2019/02/18/learn-rust-one/</id>
    <published>2019-02-18T12:43:07.000Z</published>
    <updated>2019-02-18T12:51:33.652Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要学习 rust，记录一下 rust 的学习历程。预计最终目标是用 rust 完成一个简单的 os 内核。由于个人 golang 用的比较多，会尽可能将 rust 相关的功能和 golang 进行对比。</p><p>希望能通过 rust 接触更多的编程思想，golang 写的都不会用范型了。</p><p>NOTE: 整个学习历程可能会比较跳跃</p><a id="more"></a><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>安装 rust 一帆风顺，cargo 还是很好用的 (当然可能是短期内没有踩到坑)。rust 的包管理几乎完爆了 golang，想起过去折腾 golang 的包管理还是很心累。再一想到过段时间可能又要从 dep 换掉真的令人内心爆炸。</p><p>以下是 rust hello world!<br></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>关于这段程序，我遇到了三个问题：</p><ol><li><code>println</code> 为什么后面加了 <code>!</code></li><li>最后的分号是否可选</li><li><code>println</code> 文档在哪</li></ol><h2 id="Marco"><a href="#Marco" class="headerlink" title="Marco"></a>Marco</h2><h3 id="macro-rules"><a href="#macro-rules" class="headerlink" title="macro_rules!"></a>macro_rules!</h3><p><code>println!</code> 表示这个是一个 <code>macro</code>。这让我想起了被 C 的 <code>#define</code> 支配的日子。<code>macro</code> 本质就是代码替换，但是骚操作太多，很多语言完全放弃了 macro 这种特性（比如 golang）。</p><p>rust 中 <code>macro</code> 的语法如下，<code>( $( $x:expr ),* )</code> 涉及到了 <strong>模式匹配</strong> 的概念。</p><p>TODO: 模式匹配</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">macro_rules!</span> vec &#123;</span><br><span class="line">    ( $( $x:expr ),* ) =&gt; &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> temp_vec = <span class="built_in">Vec</span>::new();</span><br><span class="line">            $(</span><br><span class="line">                temp_vec.push($x);</span><br><span class="line">            )*</span><br><span class="line">            temp_vec</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>macro</code> 展开后如下，其中 <code>$()*</code> 类似 regex，表示生成任意次，次数对应匹配 <code>( $( $x:expr ),* )</code> 多少次，匹配 <code>1, 2, 3</code> 就生成了 3 次。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v: <span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line"><span class="keyword">let</span> v: <span class="built_in">Vec</span>&lt;<span class="built_in">u32</span>&gt; = &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> temp_vec = <span class="built_in">Vec</span>::new();</span><br><span class="line">    temp_vec.push(<span class="number">1</span>);</span><br><span class="line">    temp_vec.push(<span class="number">2</span>);</span><br><span class="line">    temp_vec.push(<span class="number">3</span>);</span><br><span class="line">    temp_vec</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后小萌新突然发现 rust 说 <code>macro_ruls!</code> 有很多问题，会被废弃。<br>emmmm… 反正 golang 都甚至没有 <code>macro</code></p><h3 id="procedural-macro"><a href="#procedural-macro" class="headerlink" title="procedural macro"></a>procedural macro</h3><p>还有一种 macro 叫做 procedural macro，有以下三种情况</p><ul><li>Custom <code>#[derive]</code> macros</li><li>Attribute-like macros</li><li>Function-like macros</li></ul><p>和上面的 <code>macro_rule</code> 的区别在于不是单纯的代码段替换而是接受一段 rust 代码后输出一段 rust 代码（感觉是可以自定义 macro template 逻辑的意思）</p><p>TODO: procedural macro 详解</p><h2 id="Statement-Or-Expression"><a href="#Statement-Or-Expression" class="headerlink" title="Statement Or Expression"></a>Statement Or Expression</h2><p>rust 被称为 <strong>expression language</strong>，<code>statement</code> 和 <code>expression</code> 最主要的区别在于 <code>expression</code> 总是返回值。</p><p>在 rust 中 <code>statement</code> 有以下几种</p><ul><li>Item: 类似各种 <code>fn</code> 之类的声明</li><li>LetStatement: <code>let</code> 语句</li><li>ExpressionStatement: <strong>所有的 <code>expression</code> 加上 <code>;</code> 后就成了 <code>statment</code></strong></li><li>MacroInvocationSemi: <code>macro</code> 相关的调用语句</li></ul><h3 id="Why-println-without-can-be-compiled"><a href="#Why-println-without-can-be-compiled" class="headerlink" title="Why println! without ; can be compiled"></a>Why println! without ; can be compiled</h3><p><code>Hello World</code> 中 <code>println!</code> 语句的最后是可以不添加分号的，原因是 rust 默认返回最后一个 <code>expression</code> 的值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// it's ok</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">ok</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">println</span>!</span>(<span class="string">"aaa"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// it's also ok</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">alsoOk</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">println</span>!</span>(<span class="string">"aaa"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"aaa"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// it's error, because expression only can be the last of fn</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">err</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">println</span>!</span>(<span class="string">"aaa"</span>)</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"aaa"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外 rust 中还有一个<strong>设定是 <code>statement</code> 会返回 <code>()</code></strong>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x is [1,2,3]</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;</span><br><span class="line">    <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// y is ()</span></span><br><span class="line"><span class="keyword">let</span> y = &#123;</span><br><span class="line">    <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>个人感觉这个操作挺迷的。</p><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><p><a href="https://doc.rust-lang.org/std/macro.println.html" target="_blank" rel="noopener">println 文档</a></p><p>文档的直观感觉还是很不错的。</p><h2 id="At-Last"><a href="#At-Last" class="headerlink" title="At Last"></a>At Last</h2><p>TODOs:</p><ul><li>模式匹配</li><li>procedural macro 详解</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想要学习 rust，记录一下 rust 的学习历程。预计最终目标是用 rust 完成一个简单的 os 内核。由于个人 golang 用的比较多，会尽可能将 rust 相关的功能和 golang 进行对比。&lt;/p&gt;&lt;p&gt;希望能通过 rust 接触更多的编程思想，golang 写的都不会用范型了。&lt;/p&gt;&lt;p&gt;NOTE: 整个学习历程可能会比较跳跃&lt;/p&gt;
    
    </summary>
    
      <category term="language" scheme="https://liubog2008.github.io/categories/language/"/>
    
      <category term="rust" scheme="https://liubog2008.github.io/categories/language/rust/"/>
    
    
      <category term="rust" scheme="https://liubog2008.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liubog2008.github.io/2019/02/17/hello-world/"/>
    <id>https://liubog2008.github.io/2019/02/17/hello-world/</id>
    <published>2019-02-17T10:44:48.251Z</published>
    <updated>2019-02-17T10:44:48.251Z</updated>
    
    <content type="html"><![CDATA[<p>Testing the hexo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Testing the hexo&lt;/p&gt;
      
    
    </summary>
    
      <category term="tools" scheme="https://liubog2008.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://liubog2008.github.io/tags/tools/"/>
    
      <category term="hexo" scheme="https://liubog2008.github.io/tags/hexo/"/>
    
      <category term="hexo/next" scheme="https://liubog2008.github.io/tags/hexo-next/"/>
    
  </entry>
  
</feed>
